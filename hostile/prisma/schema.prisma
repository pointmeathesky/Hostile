// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  username  String   @unique
  password  String
  posts     Post[]
  comments Comment[]
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  name        String   @db.VarChar(255)
  body        String   @db.VarChar(1024)
  belongsToId String
  belongsTo   User     @relation(fields: [belongsToId], references: [id])
  updates     Update[]
  comments Comment[]

  @@unique([id, belongsToId])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  body        String   @db.VarChar(1024)
  belongsToId String
  belongsTo   User     @relation(fields: [belongsToId], references: [id])
  postId  String
  post Post     @relation(fields: [postId], references: [id], map: "Comment_Post_fkey")
  updates     Update[]

  @@unique([id, belongsToId])
  @@unique([id, postId])
}

enum UPDATE_STATUS {
  IN_PROGRESS
  SHIPPED
  DEPRECATED
}

model Update {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  body    String
  status  UPDATE_STATUS @default(IN_PROGRESS)
  version String?
  asset   String?

  postId       String
  post         Post          @relation(fields: [postId], references: [id])
  updatePoints UpdatePoint[]
  commentId  String?  // the ? makes it optional
  comment    Comment? @relation(fields: [commentId], references: [id])

}

model UpdatePoint {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime

  name        String @db.VarChar(255)
  description String

  updateId String
  update   Update @relation(fields: [updateId], references: [id])
}
