generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  body        String
  belongsToId String   @db.ObjectId
  belongsTo   User     @relation(fields: [belongsToId], references: [id])
  postId      String   @db.ObjectId
  post        Post     @relation(fields: [postId], references: [id])
  updates     Update[]

  @@index([id, belongsToId])
  @@index([id, postId])
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  name        String
  body        String
  belongsToId String    @db.ObjectId
  belongsTo   User      @relation(fields: [belongsToId], references: [id])
  updates     Update[]
  comments    Comment[]

  @@index([id, belongsToId])
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  valid     Boolean  @default(true)
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  username  String    @unique
  password  String
  posts     Post[]
  comments  Comment[]
  sessions  Session[]
}

enum UPDATE_STATUS {
  IN_PROGRESS
  SHIPPED
  DEPRECATED
}

model Update {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  title        String
  body         String
  status       UPDATE_STATUS @default(IN_PROGRESS)
  version      String?
  asset        String?
  postId       String        @db.ObjectId
  post         Post          @relation(fields: [postId], references: [id])
  updatePoints UpdatePoint[]
  commentId    String?       @db.ObjectId
  comment      Comment?      @relation(fields: [commentId], references: [id])
}

model UpdatePoint {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  name        String
  description String
  updateId    String   @db.ObjectId
  update      Update   @relation(fields: [updateId], references: [id])
}
